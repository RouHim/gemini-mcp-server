[build-system]
requires = ["setuptools>=75.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "gemini-mcp-server"
version = "0.1.0"
description = "MCP server for Gemini image generation optimized for free tier usage"
authors = [{name = "RouHim", email = "rouven@himmelstein.info"}]
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers", 
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "mcp>=1.0.0",
    "google-generativeai>=0.3.0",
    "aiohttp>=3.9.0",
    "asyncio-throttle>=1.0.2",
    "pydantic>=2.5.0",
    "python-dotenv>=1.0.0",
    "pillow>=10.1.0",
    "tenacity>=8.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "python-semantic-release>=9.14.0",
    "pre-commit>=4.0.0",
    "bandit[toml]>=1.7.10",
    "safety>=3.2.0",
]

[project.urls]
Homepage = "https://github.com/RouHim/gemini-mcp-server"
"Bug Reports" = "https://github.com/RouHim/gemini-mcp-server/issues"
"Source" = "https://github.com/RouHim/gemini-mcp-server"

[project.entry-points."console_scripts"]
gemini-mcp-server = "gemini_mcp_server.server:console_main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.ruff]
line-length = 88
target-version = "py310"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings  
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "RUF",  # ruff-specific rules
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PL",   # pylint
    "TRY",  # tryceratops
    "FLY",  # flynt
    "PERF", # perflint
    "FURB", # refurb
    "LOG",  # flake8-logging
    "G",    # flake8-logging-format
]
ignore = [
    "PLR0913",  # too many arguments
    "PLR0915",  # too many statements
    "TRY003",   # raise vanilla exception
    "TRY300",   # try-except in loop
    "PLR2004",  # magic value comparison
    "SIM108",   # if-else-block can be replaced with ternary
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG001", "PLR2004", "TRY301"]
"src/gemini_mcp_server/__init__.py" = ["F401"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
follow_imports = "silent"

[[tool.mypy.overrides]]
module = [
    "google.*",
    "mcp.*",
    "tenacity.*",
    "dotenv.*",
]
ignore_missing_imports = true

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
version_variables = []
version_pattern = []
build_command = "pip install build && python -m build"
major_on_zero = false
allow_zero_version = true

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = []

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = true

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore", 
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "style",
    "refactor",
    "test",
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers --strict-config"
asyncio_mode = "auto"
minversion = "7.0"
markers = [
    "unit: marks tests as unit tests (fast)",
    "integration: marks tests as integration tests (slower)",
    "smoke: marks tests as smoke tests (critical functionality)",
    "slow: marks tests as slow running",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning:pydantic.*",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "src/gemini_mcp_server/__pycache__/*",
    "*/migrations/*",
    "*/__init__.py",
]
branch = true
parallel = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "except ImportError:",
    "except ModuleNotFoundError:",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]