[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "gemini-mcp-server"
version = "0.1.0"
description = "MCP server for Gemini image generation optimized for free tier usage"
authors = [{name = "RouHim", email = "rouven@himmelstein.info"}]
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "mcp>=1.0.0",
    "google-generativeai>=0.3.0",
    "aiohttp>=3.9.0",
    "asyncio-throttle>=1.0.2",
    "pydantic>=2.5.0",
    "python-dotenv>=1.0.0",
    "pillow>=10.1.0",
    "tenacity>=8.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "mypy>=1.7.0",
    "ruff>=0.1.6",
]

[project.urls]
Homepage = "https://github.com/RouHim/gemini-mcp-server"
"Bug Reports" = "https://github.com/RouHim/gemini-mcp-server/issues"
"Source" = "https://github.com/RouHim/gemini-mcp-server"

[project.entry-points."console_scripts"]
gemini-mcp-server = "gemini_mcp_server.server:console_main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'

[tool.ruff]
select = ["E", "F", "W", "C90", "I", "N", "D", "UP", "YTT", "ANN", "S", "BLE", "FBT", "B", "A", "COM", "C4", "DTZ", "T10", "EM", "EXE", "ISC", "ICN", "G", "INP", "PIE", "T20", "PYI", "PT", "Q", "RSE", "RET", "SLF", "SIM", "TID", "TCH", "ARG", "PTH", "ERA", "PD", "PGH", "PL", "TRY", "NPY", "RUF"]
ignore = ["D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107"]
line-length = 88
target-version = "py310"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers --strict-config"
asyncio_mode = "auto"
minversion = "7.0"
markers = [
    "unit: marks tests as unit tests (fast)",
    "integration: marks tests as integration tests (slower)",
    "smoke: marks tests as smoke tests (critical functionality)",
    "slow: marks tests as slow running",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning:pydantic.*",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "src/gemini_mcp_server/__pycache__/*",
    "*/migrations/*",
    "*/__init__.py",
]
branch = true
parallel = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "except ImportError:",
    "except ModuleNotFoundError:",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"