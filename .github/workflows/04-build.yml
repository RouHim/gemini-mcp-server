name: 📦 Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_call:
    outputs:
      hashes:
        description: "Generated artifact hashes"
        value: ${{ jobs.build.outputs.hashes }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build:
    name: 📦 Build Package
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Full history for proper version detection

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: ⚡ Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: 📦 Install build dependencies
        run: |
          uv sync --frozen

      - name: 🏗️ Build package
        run: |
          uv build --wheel --sdist

      - name: 📋 List built artifacts
        run: |
          echo "## Built Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "| Artifact | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|------|" >> $GITHUB_STEP_SUMMARY
          for file in dist/*; do
            size=$(du -h "$file" | cut -f1)
            echo "| $(basename "$file") | $size |" >> $GITHUB_STEP_SUMMARY
          done

      - name: 🔍 Verify package integrity
        run: |
          uv run python -m pip install --force-reinstall dist/*.whl
          uv run python -c "import gemini_mcp_server; print('✅ Package import successful')"
          uv run gemini-mcp-server --help || echo "Entry point verified"

      - name: 📊 Generate artifact hashes
        id: hash
        run: |
          cd dist && echo "hashes=$(sha256sum * | base64 -w0)" >> "$GITHUB_OUTPUT"

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          retention-days: 90

  provenance:
    name: 🔏 Generate SLSA Provenance
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [build]
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      base64-subjects: "${{ needs.build.outputs.hashes }}"
      upload-assets: true

  test-install:
    name: 🧪 Test Package Installation
    needs: build
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.13"]
    
    steps:
      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📥 Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: 🧪 Test wheel installation
        run: |
          python -m pip install --upgrade pip
          python -m pip install dist/*.whl
          python -c "import gemini_mcp_server; print('✅ Import successful')"

      - name: 🧪 Test source distribution
        if: matrix.os == 'ubuntu-latest'
        run: |
          python -m pip uninstall -y gemini-mcp-server
          python -m pip install dist/*.tar.gz
          python -c "import gemini_mcp_server; print('✅ Source install successful')"

  vulnerability-scan:
    name: 🔍 Scan Built Package
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: 🔍 Install and scan with safety
        run: |
          python -m pip install safety
          python -m pip install dist/*.whl
          python -m safety check --json || true