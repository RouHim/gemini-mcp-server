name: CI/CD Pipeline
on:
  push:
  pull_request:
    types:
      - opened
  workflow_dispatch: # allow manual execution

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write  # OIDC for PyPI publishing

jobs:

  validate:
    name: 🔍 Code Quality (ruff, mypy, pre-commit)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: ⚡ Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"

      - name: 📦 Install dependencies
        run: uv sync --extra dev

      - name: 🔍 Lint with Ruff
        run: uv run ruff check src/ tests/ --output-format=github

      - name: 🎨 Check formatting with Ruff
        run: uv run ruff format --check src/ tests/

      - name: 🔧 Type check with mypy
        run: uv run mypy src/ --install-types --non-interactive

      - name: ✅ Pre-commit hooks
        uses: pre-commit/action@v3.0.1
        if: github.event_name == 'pull_request'
        env:
          SKIP: no-commit-to-branch

  validate-pyproject:
    name: 📝 Configuration Validation
    runs-on: ubuntu-latest
    timeout-minutes: 3
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: ⚡ Setup uv
        uses: astral-sh/setup-uv@v4

      - name: 🔍 Validate pyproject.toml
        run: uv run python -c "import tomllib; tomllib.load(open('pyproject.toml', 'rb'))"

  dependency-scan:
    name: 🔐 Security Vulnerability Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: ⚡ Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: 📦 Install dependencies
        run: uv sync --extra dev

      - name: 🔒 Run Safety check
        run: uv run safety check --json --output safety-report.json || true

      - name: 🔍 Dependency Review (PRs only)
        if: github.event_name == 'pull_request'
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

  secrets-scan:
    name: 🔑 Secret Detection
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 🔍 Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --only-verified

  test:
    name: 🧪 Matrix Testing
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    needs: [ validate, validate-pyproject ]
    
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        python-version: [ "3.12", "3.13" ]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: ⚡ Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"

      - name: 📦 Install dependencies
        run: uv sync --extra dev

      - name: 🧪 Run tests with coverage
        run: uv run pytest tests/ -v --cov=src --cov-report=xml --cov-fail-under=43

      - name: 📊 Upload coverage (Ubuntu Python 3.13 only)
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.13'
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  build:
    name: 📦 Package Building + Verification
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [ test, dependency-scan, secrets-scan ]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: ⚡ Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: 📦 Install build dependencies
        run: uv sync

      - name: 🏗️ Build package
        run: uv build --wheel --sdist

      - name: 🔍 Verify package integrity
        run: |
          uv run python -m pip install --force-reinstall dist/*.whl
          uv run python -c "import gemini_mcp_server; print('✅ Package import successful')"
          uv run gemini-mcp-server --help || echo "Entry point verified"

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          retention-days: 90

  # ============================================================================
  # DEPLOY STAGE (Main branch only)
  # ============================================================================
  deploy:
    name: 🚀 Semantic Release & PyPI Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: pypi
      url: https://pypi.org/p/gemini-mcp-server
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: ⚡ Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: 📦 Install dependencies
        run: uv sync --extra dev

      - name: 🔧 Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: 🚀 Run Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: uv run semantic-release version --print

      - name: 📊 Check if new version was created
        id: check-version
        run: |
          if git diff HEAD~1 --name-only | grep -q "pyproject.toml"; then
            echo "new-version=true" >> $GITHUB_OUTPUT
            echo "New version detected!"
          else
            echo "new-version=false" >> $GITHUB_OUTPUT
            echo "No new version created"
          fi

      - name: 🏗️ Build package for release
        if: steps.check-version.outputs.new-version == 'true'
        run: uv build --wheel --sdist

      - name: 🔐 Publish to PyPI
        if: steps.check-version.outputs.new-version == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true
          attestations: true