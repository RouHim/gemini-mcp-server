name: 🛡️ Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_call:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  codeql:
    name: 🔍 CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 🔧 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          config-file: ./.github/codeql/codeql-config.yml

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"

  dependency-scan:
    name: 🔐 Dependency Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: ⚡ Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: 📦 Install dependencies
        run: |
          uv sync --dev --frozen

      - name: 🔒 Run Safety check
        run: |
          uv run safety check --json --output safety-report.json || true
          if [ -f safety-report.json ]; then
            echo "::group::Safety Report"
            cat safety-report.json
            echo "::endgroup::"
          fi

      - name: 📊 Upload Safety results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: safety-report
          path: safety-report.json
          retention-days: 30

  bandit-scan:
    name: 🚨 Bandit Security Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: ⚡ Setup uv
        uses: astral-sh/setup-uv@v4

      - name: 📦 Install dependencies
        run: |
          uv sync --dev --frozen

      - name: 🚨 Run Bandit
        run: |
          uv run bandit -r src/ -f json -o bandit-report.json || true
          if [ -f bandit-report.json ]; then
            echo "::group::Bandit Report"
            cat bandit-report.json
            echo "::endgroup::"
          fi

      - name: 📊 Upload Bandit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json
          retention-days: 30

  supply-chain:
    name: 🔗 Supply Chain Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: ⚡ Setup uv
        uses: astral-sh/setup-uv@v4

      - name: 📦 Generate SBOM
        run: |
          uv sync --frozen
          uv export --format requirements-txt > requirements-freeze.txt

      - name: 📊 Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-requirements
          path: requirements-freeze.txt
          retention-days: 90

      - name: 🔍 Dependency Review
        if: github.event_name == 'pull_request'
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC

  secrets-scan:
    name: 🔑 Secrets Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Full history for comprehensive scan

      - name: 🔍 Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified